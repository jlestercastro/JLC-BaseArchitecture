// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Context;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250725014551_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Identity.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar")
                        .HasColumnName("City");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar")
                        .HasColumnName("CountryCode");

                    b.Property<string>("County")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar")
                        .HasColumnName("County");

                    b.Property<string>("FullAddress")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar")
                        .HasColumnName("FullAddress");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(10,8)")
                        .HasColumnName("Latitude");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(10,8)")
                        .HasColumnName("Longitude");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(15)
                        .HasColumnType("varchar")
                        .HasColumnName("PostalCode");

                    b.Property<string>("Province")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar")
                        .HasColumnName("Province");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar")
                        .HasColumnName("State");

                    b.Property<string>("StreetAddress1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar")
                        .HasColumnName("StreetAddress1");

                    b.Property<string>("StreetAddress2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar")
                        .HasColumnName("StreetAddress2");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(15)
                        .HasColumnType("varchar")
                        .HasColumnName("ZipCode");

                    b.HasKey("Id");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Identity.Entity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("AccessFailedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("Email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("EmailConfirmed");

                    b.Property<bool>("LockOutEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("LockOutEnabled");

                    b.Property<DateTime?>("LockOutEnd")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("LockOutEnd");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("NormalizedEmail");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("PasswordHash");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("PhoneNumberConfirmed");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar")
                        .HasColumnName("RefreshToken");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("RefreshTokenExpiryTime");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("UserName");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique();

                    b.ToTable("Entity", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Identity.EntityAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EntityId");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AddressId");

                    b.Property<string>("AddressTypeCode")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar")
                        .HasColumnName("AddressTypeCode");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedById");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("CreatedDate")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive");

                    b.Property<Guid?>("RemovedById")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RemovedById");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("RemovedDate");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UpdatedById");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id", "EntityId", "AddressId", "AddressTypeCode");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("AddressTypeCode");

                    b.HasIndex("EntityId");

                    b.ToTable("EntityAddress", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Identity.EntityClaims", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("ClaimType");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar")
                        .HasColumnName("ClaimValue");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("EntityClaim", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Identity.EntityContacts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid>("EntityInformationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactTypeCode")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar")
                        .HasColumnName("ContactTypeCode");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedById");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("CreatedDate")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar")
                        .HasColumnName("Name");

                    b.Property<Guid?>("RemovedById")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RemovedById");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("RemovedDate");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UpdatedById");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("UpdatedDate");

                    b.Property<string>("Value")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar")
                        .HasColumnName("Value");

                    b.HasKey("Id", "EntityInformationId", "ContactTypeCode");

                    b.HasIndex("ContactTypeCode");

                    b.HasIndex("EntityInformationId");

                    b.ToTable("EntityContact", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Identity.EntityInformations", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("date")
                        .HasColumnName("Birthdate");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar")
                        .HasColumnName("CompanyName");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedById");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("CreatedDate")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar")
                        .HasColumnName("FirstName");

                    b.Property<string>("Gender")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar")
                        .HasColumnName("Gender");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsIndividual")
                        .HasColumnType("bit")
                        .HasColumnName("IsIndividual");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar")
                        .HasColumnName("LastName");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar")
                        .HasColumnName("MiddleName");

                    b.Property<Guid?>("RemovedById")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RemovedById");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("RemovedDate");

                    b.Property<string>("Suffix")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar")
                        .HasColumnName("Suffix");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UpdatedById");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("EntityId")
                        .IsUnique();

                    b.ToTable("EntityInformation", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Identity.EntityLogin", b =>
                {
                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("LoginProvider");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("ProviderKey");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProviderDisplayName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("ProviderDisplayName");

                    b.HasKey("EntityId", "LoginProvider", "ProviderKey");

                    b.ToTable("EntityLogin", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Identity.EntityRoles", b =>
                {
                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EntityId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("EntityRole", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Identity.EntityTokens", b =>
                {
                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(250)
                        .HasColumnType("varchar")
                        .HasColumnName("LoginProvider");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("Name");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("varchar")
                        .HasColumnName("Value");

                    b.HasKey("EntityId", "LoginProvider", "Name");

                    b.ToTable("EntityToken", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Identity.EntityVerifications", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalData")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("varchar")
                        .HasColumnName("AdditionalData");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("Code");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("CreatedDate")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiryDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("ExpiryDate")
                        .HasComputedColumnSql("DATEADD(minute, 15, CreatedDate)");

                    b.Property<short>("FailedAttempt")
                        .HasColumnType("smallint");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("IpAddress");

                    b.Property<bool>("IsUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsUsed");

                    b.Property<string>("ReferenceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UsedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VerificationCodeType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar")
                        .HasColumnName("VerificationCodeType");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("VerificationCodeType");

                    b.HasIndex("Code", "EntityId", "VerificationCodeType");

                    b.ToTable("VerificationCodes", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Identity.RoleClaims", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("ClaimType");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar")
                        .HasColumnName("ClaimValue");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Identity.Roles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("Name");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("NormalizedName");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique();

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            ConcurrencyStamp = "d188567a-4bdf-439a-8f02-b1df7ca791c6",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            ConcurrencyStamp = "accdb00c-13dc-47e4-a400-939998b7b9d7",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            ConcurrencyStamp = "28d2028c-7382-4f4c-9667-951ce7493ebd",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            ConcurrencyStamp = "908dd5cf-625e-4a71-b9d9-95aa0ebefca4",
                            Name = "Guest",
                            NormalizedName = "GUEST"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Logging.AppLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CorrelationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("DurationMs")
                        .HasColumnType("bigint");

                    b.Property<string>("Exception")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HttpMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Logger")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Properties")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Timestamp", "Level", "Logger", "UserId", "CorrelationId");

                    b.ToTable("AppLog", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Logging.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ChangedColumns")
                        .IsUnicode(false)
                        .HasColumnType("varchar(MAX)")
                        .HasColumnName("ChangedColumns");

                    b.Property<string>("Endpoint")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar")
                        .HasColumnName("Endpoint");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar")
                        .HasColumnName("EventType");

                    b.Property<string>("HttpMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar")
                        .HasColumnName("HttpMethod");

                    b.Property<string>("NewValues")
                        .IsUnicode(false)
                        .HasColumnType("varchar(MAX)")
                        .HasColumnName("NewValues");

                    b.Property<string>("OldValues")
                        .IsUnicode(false)
                        .HasColumnType("varchar(MAX)")
                        .HasColumnName("OldValues");

                    b.Property<string>("RecordId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar")
                        .HasColumnName("RecordId");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar")
                        .HasColumnName("TableName");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("Timestamp");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("Timestamp", "EventType", "TableName", "UserId");

                    b.ToTable("AuditLog", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Lv.LvAddressType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(30)
                        .HasColumnType("varchar")
                        .HasColumnName("Code");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar")
                        .HasColumnName("Description");

                    b.Property<DateTime?>("EffectiveDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified))
                        .HasColumnName("EffectiveDate");

                    b.Property<DateTime?>("ExpirationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValue(new DateTime(9999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified))
                        .HasColumnName("ExpirationDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("Name");

                    b.Property<short>("SortOrder")
                        .HasColumnType("smallint")
                        .HasColumnName("SortOrder");

                    b.HasKey("Id", "Code");

                    b.ToTable("LvAddressTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "HOME",
                            Description = "Home",
                            IsActive = false,
                            Name = "Home",
                            SortOrder = (short)10
                        },
                        new
                        {
                            Id = 2,
                            Code = "WORK",
                            Description = "Work",
                            IsActive = false,
                            Name = "Work",
                            SortOrder = (short)20
                        },
                        new
                        {
                            Id = 3,
                            Code = "BILL",
                            Description = "Billing",
                            IsActive = false,
                            Name = "Billing",
                            SortOrder = (short)30
                        },
                        new
                        {
                            Id = 4,
                            Code = "SHIP",
                            Description = "Shipping",
                            IsActive = false,
                            Name = "Shipping",
                            SortOrder = (short)40
                        },
                        new
                        {
                            Id = 5,
                            Code = "OTH",
                            Description = "Other",
                            IsActive = false,
                            Name = "Other",
                            SortOrder = (short)50
                        });
                });

            modelBuilder.Entity("Domain.Entities.Lv.LvContactType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(30)
                        .HasColumnType("varchar")
                        .HasColumnName("Code");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar")
                        .HasColumnName("Description");

                    b.Property<DateTime?>("EffectiveDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified))
                        .HasColumnName("EffectiveDate");

                    b.Property<DateTime?>("ExpirationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValue(new DateTime(9999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified))
                        .HasColumnName("ExpirationDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("Name");

                    b.Property<short>("SortOrder")
                        .HasColumnType("smallint")
                        .HasColumnName("SortOrder");

                    b.HasKey("Id", "Code");

                    b.ToTable("LvContactTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "EML",
                            Description = "Email",
                            IsActive = false,
                            Name = "Email",
                            SortOrder = (short)10
                        },
                        new
                        {
                            Id = 2,
                            Code = "PHN",
                            Description = "Phone",
                            IsActive = false,
                            Name = "Phone",
                            SortOrder = (short)20
                        },
                        new
                        {
                            Id = 3,
                            Code = "MBL",
                            Description = "Mobile",
                            IsActive = false,
                            Name = "Mobile",
                            SortOrder = (short)30
                        },
                        new
                        {
                            Id = 4,
                            Code = "FAX",
                            Description = "Fax",
                            IsActive = false,
                            Name = "Fax",
                            SortOrder = (short)40
                        },
                        new
                        {
                            Id = 5,
                            Code = "WEB",
                            Description = "Website",
                            IsActive = false,
                            Name = "Website",
                            SortOrder = (short)50
                        },
                        new
                        {
                            Id = 6,
                            Code = "FB",
                            Description = "Facebook",
                            IsActive = false,
                            Name = "Facebook",
                            SortOrder = (short)60
                        },
                        new
                        {
                            Id = 7,
                            Code = "X",
                            Description = "X",
                            IsActive = false,
                            Name = "X",
                            SortOrder = (short)70
                        },
                        new
                        {
                            Id = 8,
                            Code = "INSTG",
                            Description = "Instagram",
                            IsActive = false,
                            Name = "Instagram",
                            SortOrder = (short)80
                        },
                        new
                        {
                            Id = 9,
                            Code = "OTH",
                            Description = "Other",
                            IsActive = false,
                            Name = "Other",
                            SortOrder = (short)90
                        });
                });

            modelBuilder.Entity("Domain.Entities.Lv.LvVerificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(30)
                        .HasColumnType("varchar")
                        .HasColumnName("Code");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar")
                        .HasColumnName("Description");

                    b.Property<DateTime?>("EffectiveDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValue(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified))
                        .HasColumnName("EffectiveDate");

                    b.Property<DateTime?>("ExpirationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValue(new DateTime(9999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified))
                        .HasColumnName("ExpirationDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("Name");

                    b.Property<short>("SortOrder")
                        .HasColumnType("smallint")
                        .HasColumnName("SortOrder");

                    b.HasKey("Id", "Code");

                    b.ToTable("LvVerificationType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "2FAV",
                            Description = "Two Factor Authentication",
                            IsActive = false,
                            Name = "Two Factor Authentication",
                            SortOrder = (short)10
                        },
                        new
                        {
                            Id = 2,
                            Code = "EMLV",
                            Description = "Email Veiriication",
                            IsActive = false,
                            Name = "Email Verification",
                            SortOrder = (short)20
                        },
                        new
                        {
                            Id = 3,
                            Code = "PHV",
                            Description = "Phone Verification",
                            IsActive = false,
                            Name = "Phone Verification",
                            SortOrder = (short)30
                        },
                        new
                        {
                            Id = 4,
                            Code = "PWDV",
                            Description = "Password Reset Verification",
                            IsActive = false,
                            Name = "Password Reset Verification",
                            SortOrder = (short)40
                        },
                        new
                        {
                            Id = 5,
                            Code = "ACCV",
                            Description = "Account Recovery Verification",
                            IsActive = false,
                            Name = "Account Recovery Verification",
                            SortOrder = (short)50
                        });
                });

            modelBuilder.Entity("Domain.Entities.Identity.EntityAddress", b =>
                {
                    b.HasOne("Domain.Entities.Identity.Address", "Address")
                        .WithOne("UserAddresses")
                        .HasForeignKey("Domain.Entities.Identity.EntityAddress", "AddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Lv.LvAddressType", "AddressType")
                        .WithMany()
                        .HasForeignKey("AddressTypeCode")
                        .HasPrincipalKey("Code")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Identity.EntityInformations", "EntityInformations")
                        .WithMany("EntityAddresses")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("AddressType");

                    b.Navigation("EntityInformations");
                });

            modelBuilder.Entity("Domain.Entities.Identity.EntityClaims", b =>
                {
                    b.HasOne("Domain.Entities.Identity.Entity", "Entity")
                        .WithMany("Claims")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Domain.Entities.Identity.EntityContacts", b =>
                {
                    b.HasOne("Domain.Entities.Lv.LvContactType", "ContactType")
                        .WithMany()
                        .HasForeignKey("ContactTypeCode")
                        .HasPrincipalKey("Code")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Identity.EntityInformations", "EntityInformations")
                        .WithMany("EntityContacts")
                        .HasForeignKey("EntityInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactType");

                    b.Navigation("EntityInformations");
                });

            modelBuilder.Entity("Domain.Entities.Identity.EntityInformations", b =>
                {
                    b.HasOne("Domain.Entities.Identity.Entity", "Entity")
                        .WithOne("EntityInformation")
                        .HasForeignKey("Domain.Entities.Identity.EntityInformations", "EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Domain.Entities.Identity.EntityLogin", b =>
                {
                    b.HasOne("Domain.Entities.Identity.Entity", "Entity")
                        .WithMany("Logins")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Domain.Entities.Identity.EntityRoles", b =>
                {
                    b.HasOne("Domain.Entities.Identity.Entity", "Entity")
                        .WithMany("EntityRoles")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Identity.Roles", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.Identity.EntityTokens", b =>
                {
                    b.HasOne("Domain.Entities.Identity.Entity", "Entity")
                        .WithMany("Tokens")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Domain.Entities.Identity.EntityVerifications", b =>
                {
                    b.HasOne("Domain.Entities.Identity.Entity", "Entity")
                        .WithMany("EntityVerifications")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Lv.LvVerificationType", "LvVerificationCodeType")
                        .WithMany()
                        .HasForeignKey("VerificationCodeType")
                        .HasPrincipalKey("Code")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("LvVerificationCodeType");
                });

            modelBuilder.Entity("Domain.Entities.Identity.RoleClaims", b =>
                {
                    b.HasOne("Domain.Entities.Identity.Roles", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.Identity.Address", b =>
                {
                    b.Navigation("UserAddresses");
                });

            modelBuilder.Entity("Domain.Entities.Identity.Entity", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("EntityInformation");

                    b.Navigation("EntityRoles");

                    b.Navigation("EntityVerifications");

                    b.Navigation("Logins");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("Domain.Entities.Identity.EntityInformations", b =>
                {
                    b.Navigation("EntityAddresses");

                    b.Navigation("EntityContacts");
                });

            modelBuilder.Entity("Domain.Entities.Identity.Roles", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
